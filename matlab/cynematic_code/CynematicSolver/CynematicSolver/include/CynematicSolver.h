/*
CynematicSolver : A fast customized optimization solver.

Copyright (C) 2013-2019 EMBOTECH AG [info@embotech.com]. All rights reserved.


This software is intended for simulation and testing purposes only. 
Use of this software for any commercial purpose is prohibited.

This program is distributed in the hope that it will be useful.
EMBOTECH makes NO WARRANTIES with respect to the use of the software 
without even the implied warranty of MERCHANTABILITY or FITNESS FOR A 
PARTICULAR PURPOSE. 

EMBOTECH shall not have any liability for any damage arising from the use
of the software.

This Agreement shall exclusively be governed by and interpreted in 
accordance with the laws of Switzerland, excluding its principles
of conflict of laws. The Courts of Zurich-City shall have exclusive 
jurisdiction in case of any dispute.

*/

/* Generated by FORCES PRO v1.8.0 on Wednesday, June 12, 2019 at 4:16:31 PM */

#ifndef SOLVER_STDIO_H
#define SOLVER_STDIO_H
#include <stdio.h>
#endif

#ifndef CynematicSolver_H
#define CynematicSolver_H

/* DATA TYPE ------------------------------------------------------------*/
typedef double CynematicSolver_float;

typedef double CynematicSolverinterface_float;

#ifndef SOLVER_STANDARD_TYPES
#define SOLVER_STANDARD_TYPES

typedef signed char solver_int8_signed;
typedef unsigned char solver_int8_unsigned;
typedef char solver_int8_default;
typedef signed short int solver_int16_signed;
typedef unsigned short int solver_int16_unsigned;
typedef short int solver_int16_default;
typedef signed int solver_int32_signed;
typedef unsigned int solver_int32_unsigned;
typedef int solver_int32_default;
typedef signed long long int solver_int64_signed;
typedef unsigned long long int solver_int64_unsigned;
typedef long long int solver_int64_default;

#endif

/* SOLVER SETTINGS ------------------------------------------------------*/

/* MISRA-C compliance */
#ifndef MISRA_C_CynematicSolver
#define MISRA_C_CynematicSolver (0)
#endif

/* restrict code */
#ifndef RESTRICT_CODE_CynematicSolver
#define RESTRICT_CODE_CynematicSolver (0)
#endif

/* print level */
#ifndef SET_PRINTLEVEL_CynematicSolver
#define SET_PRINTLEVEL_CynematicSolver    (0)
#endif

/* timing */
#ifndef SET_TIMING_CynematicSolver
#define SET_TIMING_CynematicSolver    (1)
#endif

/* Numeric Warnings */
/* #define PRINTNUMERICALWARNINGS */

/* maximum number of iterations  */
#define SET_MAXIT_CynematicSolver			(200)	

/* scaling factor of line search (FTB rule) */
#define SET_FLS_SCALE_CynematicSolver		(CynematicSolver_float)(0.99)      

/* maximum number of supported elements in the filter */
#define MAX_FILTER_SIZE_CynematicSolver	(200) 

/* maximum number of supported elements in the filter */
#define MAX_SOC_IT_CynematicSolver			(4) 

/* desired relative duality gap */
#define SET_ACC_RDGAP_CynematicSolver		(CynematicSolver_float)(0.0001)

/* desired maximum residual on equality constraints */
#define SET_ACC_RESEQ_CynematicSolver		(CynematicSolver_float)(1E-06)

/* desired maximum residual on inequality constraints */
#define SET_ACC_RESINEQ_CynematicSolver	(CynematicSolver_float)(1E-06)

/* desired maximum violation of complementarity */
#define SET_ACC_KKTCOMPL_CynematicSolver	(CynematicSolver_float)(1E-06)


/* RETURN CODES----------------------------------------------------------*/
/* solver has converged within desired accuracy */
#define OPTIMAL_CynematicSolver      (1)

/* maximum number of iterations has been reached */
#define MAXITREACHED_CynematicSolver (0)

/* wrong number of inequalities error */
#define INVALID_NUM_INEQ_ERROR_CynematicSolver  (-4)

/* factorization error */
#define FACTORIZATION_ERROR_CynematicSolver   (-5)

/* NaN encountered in function evaluations */
#define BADFUNCEVAL_CynematicSolver  (-6)

/* no progress in method possible */
#define NOPROGRESS_CynematicSolver   (-7)

/* invalid values in parameters */
#define PARAM_VALUE_ERROR_CynematicSolver   (-11)

/* licensing error - solver not valid on this machine */
#define LICENSE_ERROR_CynematicSolver  (-100)



/* PARAMETERS -----------------------------------------------------------*/
/* fill this with data before calling the solver! */
typedef struct
{
    /* vector of size 800 */
    CynematicSolver_float x0[800];

    /* vector of size 4 */
    CynematicSolver_float xinit[4];

    /* vector of size 200 */
    CynematicSolver_float all_parameters[200];


} CynematicSolver_params;


/* OUTPUTS --------------------------------------------------------------*/
/* the desired variables are put here by the solver */
typedef struct
{
    /* vector of size 8 */
    CynematicSolver_float x001[8];

    /* vector of size 8 */
    CynematicSolver_float x002[8];

    /* vector of size 8 */
    CynematicSolver_float x003[8];

    /* vector of size 8 */
    CynematicSolver_float x004[8];

    /* vector of size 8 */
    CynematicSolver_float x005[8];

    /* vector of size 8 */
    CynematicSolver_float x006[8];

    /* vector of size 8 */
    CynematicSolver_float x007[8];

    /* vector of size 8 */
    CynematicSolver_float x008[8];

    /* vector of size 8 */
    CynematicSolver_float x009[8];

    /* vector of size 8 */
    CynematicSolver_float x010[8];

    /* vector of size 8 */
    CynematicSolver_float x011[8];

    /* vector of size 8 */
    CynematicSolver_float x012[8];

    /* vector of size 8 */
    CynematicSolver_float x013[8];

    /* vector of size 8 */
    CynematicSolver_float x014[8];

    /* vector of size 8 */
    CynematicSolver_float x015[8];

    /* vector of size 8 */
    CynematicSolver_float x016[8];

    /* vector of size 8 */
    CynematicSolver_float x017[8];

    /* vector of size 8 */
    CynematicSolver_float x018[8];

    /* vector of size 8 */
    CynematicSolver_float x019[8];

    /* vector of size 8 */
    CynematicSolver_float x020[8];

    /* vector of size 8 */
    CynematicSolver_float x021[8];

    /* vector of size 8 */
    CynematicSolver_float x022[8];

    /* vector of size 8 */
    CynematicSolver_float x023[8];

    /* vector of size 8 */
    CynematicSolver_float x024[8];

    /* vector of size 8 */
    CynematicSolver_float x025[8];

    /* vector of size 8 */
    CynematicSolver_float x026[8];

    /* vector of size 8 */
    CynematicSolver_float x027[8];

    /* vector of size 8 */
    CynematicSolver_float x028[8];

    /* vector of size 8 */
    CynematicSolver_float x029[8];

    /* vector of size 8 */
    CynematicSolver_float x030[8];

    /* vector of size 8 */
    CynematicSolver_float x031[8];

    /* vector of size 8 */
    CynematicSolver_float x032[8];

    /* vector of size 8 */
    CynematicSolver_float x033[8];

    /* vector of size 8 */
    CynematicSolver_float x034[8];

    /* vector of size 8 */
    CynematicSolver_float x035[8];

    /* vector of size 8 */
    CynematicSolver_float x036[8];

    /* vector of size 8 */
    CynematicSolver_float x037[8];

    /* vector of size 8 */
    CynematicSolver_float x038[8];

    /* vector of size 8 */
    CynematicSolver_float x039[8];

    /* vector of size 8 */
    CynematicSolver_float x040[8];

    /* vector of size 8 */
    CynematicSolver_float x041[8];

    /* vector of size 8 */
    CynematicSolver_float x042[8];

    /* vector of size 8 */
    CynematicSolver_float x043[8];

    /* vector of size 8 */
    CynematicSolver_float x044[8];

    /* vector of size 8 */
    CynematicSolver_float x045[8];

    /* vector of size 8 */
    CynematicSolver_float x046[8];

    /* vector of size 8 */
    CynematicSolver_float x047[8];

    /* vector of size 8 */
    CynematicSolver_float x048[8];

    /* vector of size 8 */
    CynematicSolver_float x049[8];

    /* vector of size 8 */
    CynematicSolver_float x050[8];

    /* vector of size 8 */
    CynematicSolver_float x051[8];

    /* vector of size 8 */
    CynematicSolver_float x052[8];

    /* vector of size 8 */
    CynematicSolver_float x053[8];

    /* vector of size 8 */
    CynematicSolver_float x054[8];

    /* vector of size 8 */
    CynematicSolver_float x055[8];

    /* vector of size 8 */
    CynematicSolver_float x056[8];

    /* vector of size 8 */
    CynematicSolver_float x057[8];

    /* vector of size 8 */
    CynematicSolver_float x058[8];

    /* vector of size 8 */
    CynematicSolver_float x059[8];

    /* vector of size 8 */
    CynematicSolver_float x060[8];

    /* vector of size 8 */
    CynematicSolver_float x061[8];

    /* vector of size 8 */
    CynematicSolver_float x062[8];

    /* vector of size 8 */
    CynematicSolver_float x063[8];

    /* vector of size 8 */
    CynematicSolver_float x064[8];

    /* vector of size 8 */
    CynematicSolver_float x065[8];

    /* vector of size 8 */
    CynematicSolver_float x066[8];

    /* vector of size 8 */
    CynematicSolver_float x067[8];

    /* vector of size 8 */
    CynematicSolver_float x068[8];

    /* vector of size 8 */
    CynematicSolver_float x069[8];

    /* vector of size 8 */
    CynematicSolver_float x070[8];

    /* vector of size 8 */
    CynematicSolver_float x071[8];

    /* vector of size 8 */
    CynematicSolver_float x072[8];

    /* vector of size 8 */
    CynematicSolver_float x073[8];

    /* vector of size 8 */
    CynematicSolver_float x074[8];

    /* vector of size 8 */
    CynematicSolver_float x075[8];

    /* vector of size 8 */
    CynematicSolver_float x076[8];

    /* vector of size 8 */
    CynematicSolver_float x077[8];

    /* vector of size 8 */
    CynematicSolver_float x078[8];

    /* vector of size 8 */
    CynematicSolver_float x079[8];

    /* vector of size 8 */
    CynematicSolver_float x080[8];

    /* vector of size 8 */
    CynematicSolver_float x081[8];

    /* vector of size 8 */
    CynematicSolver_float x082[8];

    /* vector of size 8 */
    CynematicSolver_float x083[8];

    /* vector of size 8 */
    CynematicSolver_float x084[8];

    /* vector of size 8 */
    CynematicSolver_float x085[8];

    /* vector of size 8 */
    CynematicSolver_float x086[8];

    /* vector of size 8 */
    CynematicSolver_float x087[8];

    /* vector of size 8 */
    CynematicSolver_float x088[8];

    /* vector of size 8 */
    CynematicSolver_float x089[8];

    /* vector of size 8 */
    CynematicSolver_float x090[8];

    /* vector of size 8 */
    CynematicSolver_float x091[8];

    /* vector of size 8 */
    CynematicSolver_float x092[8];

    /* vector of size 8 */
    CynematicSolver_float x093[8];

    /* vector of size 8 */
    CynematicSolver_float x094[8];

    /* vector of size 8 */
    CynematicSolver_float x095[8];

    /* vector of size 8 */
    CynematicSolver_float x096[8];

    /* vector of size 8 */
    CynematicSolver_float x097[8];

    /* vector of size 8 */
    CynematicSolver_float x098[8];

    /* vector of size 8 */
    CynematicSolver_float x099[8];

    /* vector of size 8 */
    CynematicSolver_float x100[8];


} CynematicSolver_output;


/* SOLVER INFO ----------------------------------------------------------*/
/* diagnostic data from last interior point step */
typedef struct
{
    /* iteration number */
    solver_int32_default it;

	/* number of iterations needed to optimality (branch-and-bound) */
	solver_int32_default it2opt;
	
    /* inf-norm of equality constraint residuals */
    CynematicSolver_float res_eq;
	
    /* inf-norm of inequality constraint residuals */
    CynematicSolver_float res_ineq;

	/* norm of stationarity condition */
    CynematicSolver_float rsnorm;

	/* max of all complementarity violations */
    CynematicSolver_float rcompnorm;

    /* primal objective */
    CynematicSolver_float pobj;	
	
    /* dual objective */
    CynematicSolver_float dobj;	

    /* duality gap := pobj - dobj */
    CynematicSolver_float dgap;		
	
    /* relative duality gap := |dgap / pobj | */
    CynematicSolver_float rdgap;		

    /* duality measure */
    CynematicSolver_float mu;

	/* duality measure (after affine step) */
    CynematicSolver_float mu_aff;
	
    /* centering parameter */
    CynematicSolver_float sigma;
	
    /* number of backtracking line search steps (affine direction) */
    solver_int32_default lsit_aff;
    
    /* number of backtracking line search steps (combined direction) */
    solver_int32_default lsit_cc;
    
    /* step size (affine direction) */
    CynematicSolver_float step_aff;
    
    /* step size (combined direction) */
    CynematicSolver_float step_cc;    

	/* solvertime */
	CynematicSolver_float solvetime;   

	/* time spent in function evaluations */
	CynematicSolver_float fevalstime;  

} CynematicSolver_info;







/* SOLVER FUNCTION DEFINITION -------------------------------------------*/
/* User License expires on: (UTC) Wednesday, August 21, 2019 9:00:00 PM (approx.) */
/* Solver License expires on: (UTC) Wednesday, August 21, 2019 9:00:00 PM (approx.) */
/* Solver Generation Request Id: d2078e56-a14c-4ece-a42d-e8fb3df9432c */
/* examine exitflag before using the result! */
#ifdef __cplusplus
extern "C" {
#endif		

typedef void (*CynematicSolver_extfunc)(CynematicSolver_float* x, CynematicSolver_float* y, CynematicSolver_float* lambda, CynematicSolver_float* params, CynematicSolver_float* pobj, CynematicSolver_float* g, CynematicSolver_float* c, CynematicSolver_float* Jeq, CynematicSolver_float* h, CynematicSolver_float* Jineq, CynematicSolver_float* H, solver_int32_default stage, solver_int32_default iterations);

extern solver_int32_default CynematicSolver_solve(CynematicSolver_params *params, CynematicSolver_output *output, CynematicSolver_info *info, FILE *fs, CynematicSolver_extfunc evalextfunctions_CynematicSolver);	





#ifdef __cplusplus
}
#endif

#endif
